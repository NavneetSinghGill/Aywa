//
//  FloatingHeaderTextField.swift
//  aywa
//
//  Created by Zoeb on 16/12/17.
//  Copyright (c) 2017 Alpha Solutions. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class FloatingHeaderTextField: UITextField {
    
    @IBInspectable
    open var activeUnderLineColor: UIColor = .gray {
        didSet {
            updateUnderLine()
        }
    }
    
    @IBInspectable
    open var underLineColor: UIColor = .gray {
        didSet {
            updateUnderLine()
        }
    }
    
    @IBInspectable
    open var placeholderColor: UIColor = .gray {
        didSet {
            updatePlaceholder()
        }
    }
    
    open var placeholderFontScale: CGFloat = 0.7
    
    var placeholderLabel = UILabel()
    var underLineLayer: CAShapeLayer!
    
    public override init(frame: CGRect) {
        super.init(frame: frame)
        
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    func setup() {
        
        placeholderLabel = UILabel(frame: CGRect(x: 13, y: 0, width: bounds.width - 10, height: bounds.height))
        
        let path = UIBezierPath()
        path.move(to: CGPoint(x: 0, y: bounds.size.height))
        path.addLine(to: CGPoint(x: bounds.size.width, y: bounds.size.height))
        
        leftViewMode = .always
        leftView = UIView(frame: CGRect(x: 0, y: 0, width: 10, height: 20))
        
        underLineLayer = CAShapeLayer()
        updateUnderLine()
        updatePlaceholder()
        underLineLayer.path = path.cgPath
        self.layer.addSublayer(underLineLayer)
        
        addSubview(placeholderLabel)
    }
    
    override open func drawPlaceholder(in rect: CGRect) {
        super.drawPlaceholder(in: rect)
        placeholderLabel.text = placeholder
        placeholder = nil
    }
    
    override open func willMove(toSuperview newSuperview: UIView?) {
        if newSuperview != nil {
            NotificationCenter.default.addObserver(self, selector: #selector(textFieldDidEndEditing), name: Notification.Name.UITextFieldTextDidEndEditing, object: self)
            NotificationCenter.default.addObserver(self, selector: #selector(textFieldDidBeginEditing), name: NSNotification.Name.UITextFieldTextDidBeginEditing, object: self)
        } else {
            NotificationCenter.default.removeObserver(self)
        }
    }
    
    @objc func textFieldDidBeginEditing() {
        UIView.animate(withDuration: 0.25) {
            print("DidBegan1: \(String(describing: self.placeholderLabel.frame))....... transform: \(self.placeholderLabel.transform)")
            self.placeholderLabel.frame = CGRect(x: 13, y: -20, width: 60, height: 44)
            print("DidBegan2: \(String(describing: self.placeholderLabel.frame))....... transform: \(self.placeholderLabel.transform)")
            
            self.placeholderLabel.transform = CGAffineTransform(scaleX: self.placeholderFontScale, y: self.placeholderFontScale)
            self.placeholderLabel.frame.origin = CGPoint(x: 13, y: self.placeholderLabel.frame.origin.y)
            print("DidBegan3: \(String(describing: self.placeholderLabel.frame))....... transform: \(self.placeholderLabel.transform)")
            
//            self.underLineLayer.strokeStart = 0
//            self.underLineLayer.strokeEnd = 1
            self.underLineLayer.strokeColor = self.activeUnderLineColor.cgColor
        }
    }
    
    @objc func textFieldDidEndEditing() {
        let isNotEmpty = text?.characters.isEmpty ?? true
        
        if isNotEmpty {
            UIView.animate(withDuration: 0.25, animations: {
                print("DidEnd1: \(String(describing: self.placeholderLabel.frame))....... transform: \(self.placeholderLabel.transform)")
                self.placeholderLabel.transform = CGAffineTransform.identity
                print("DidEnd2: \(String(describing: self.placeholderLabel.frame))....... transform: \(self.placeholderLabel.transform)")
                self.placeholderLabel.frame = CGRect(x: 13, y: 0, width: self.bounds.width - 10, height: self.bounds.height)
                print("DidEnd3: \(String(describing: self.placeholderLabel.frame))....... transform: \(self.placeholderLabel.transform)")
                
//                self.underLineLayer.strokeStart = 0
//                self.underLineLayer.strokeEnd = 1
                self.underLineLayer.strokeColor = self.underLineColor.cgColor
            })
        }
    }
    
    func updateUnderLine()  {
        underLineLayer.fillColor = UIColor.clear.cgColor
        underLineLayer.strokeColor = underLineColor.cgColor
    }
    
    func updatePlaceholder() {
        placeholderLabel.textColor = placeholderColor
    }
    

}
