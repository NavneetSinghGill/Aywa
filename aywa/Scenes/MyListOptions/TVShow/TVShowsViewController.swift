//
//  TVShowsViewController.swift
//  aywa
//
//  Created by Bestpeers on 09/01/18.
//  Copyright (c) 2018 Alpha Solutions. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SVProgressHUD

protocol TVShowsDisplayLogic: class
{
    func displayMyListShowsError(response: TVShows.MyListShows.Response)
    func displayMyListShowsResponse(response: [TVShows.MyListShows.Response])
}

class TVShowsViewController: UIViewController, TVShowsDisplayLogic
{
    var interactor: TVShowsBusinessLogic?
    var router: (NSObjectProtocol & TVShowsRoutingLogic & TVShowsDataPassing)?
    var myListShowsArray = [TVShows.MyListShows.Response]()
    
    var indexOfCell: Int?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TVShowsInteractor()
        let presenter = TVShowsPresenter()
        let router = TVShowsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    //MARK:- Private Methods
    //For Hide And Show Collection View , label and Button
    func showCollectionView() {
        if myListShowsArray.isEmpty  {
            self.collectionView.isHidden = true
            self.labelForAddShows.isHidden = false
            self.buttonForAddShows.isHidden = false
        }
        else {
            self.collectionView.dataSource = self
            self.collectionView.delegate = self
            self.collectionView.isHidden = false
            self.labelForAddShows.isHidden = true
            self.buttonForAddShows.isHidden = true
            
            self.collectionView.reloadData()
        }
    }
    
    func initialiseView() {
        // Initialization code
        let nib = UINib(nibName: Identifiers.homeImageHorizontalCollectionViewCell, bundle: Bundle.main)
        collectionView.register(nib, forCellWithReuseIdentifier: Identifiers.homeImageHorizontalCollectionViewCell)
        
        self.collectionView.isHidden = true
        self.labelForAddShows.isHidden = true
        self.buttonForAddShows.isHidden = true
        
        // Call Shows Request
        doMyListShows()
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        initialiseView()
    }
    
    // MARK: Do TV Show Controller
    
    @IBOutlet weak var labelForAddShows: UILabel!
    @IBOutlet weak var buttonForAddShows: UIButton!//TODO: User interactions Enable
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    //MARK:- Request For TV Shows
    func doMyListShows()
    {
        let request = TVShows.MyListShows.Request()
        interactor?.doTVShows(request: request)
    }
    
    func displayMyListShowsError(response: TVShows.MyListShows.Response){
        showCollectionView()
    }
    func displayMyListShowsResponse(response: [TVShows.MyListShows.Response]){
        myListShowsArray = response
        showCollectionView()
    }
    
}

extension TVShowsViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    var collectionViewOffset: CGFloat {
        set { collectionView.contentOffset.x = newValue }
        get { return collectionView.contentOffset.x }
    }
    
    //MARK:- CollectionView Delegate And Datasource Methods
    //MARK: Datasource
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return  myListShowsArray.count 
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell: HomeImagesCollectionViewCell
        cell = collectionView.dequeueReusableCell(withReuseIdentifier: Identifiers.homeImageHorizontalCollectionViewCell, for: indexPath) as! HomeImagesCollectionViewCell
        
        cell.cellAlignment = .Horizontal
        indexOfCell = indexPath.row
        
        cell.setUIShowsCollectionViewCell(shows: self.myListShowsArray[indexPath.row])
        return cell
    }
    
    //MARK: Delegate
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = self.collectionView.frame.size.width
        
        return CGSize(width: width, height: width/Constants.generalHorizontalCellAspectRatio)
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print("Collection view at row \(collectionView.tag) selected index path \(indexPath)")
    }
}

