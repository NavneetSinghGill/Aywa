//
//  LandingViewController.swift
//  aywa
//
//  Created by Zoeb on 11/12/17.
//  Copyright (c) 2017 Alpha Solutions. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LandingDisplayLogic: class
{
    func displayError(response: Landing.JWTToken.Response)
    func displayNextScreen()
}

class LandingViewController: UIViewController, LandingDisplayLogic, UIScrollViewDelegate
{
    var interactor: LandingBusinessLogic?
    var router: (NSObjectProtocol & LandingRoutingLogic & LandingDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LandingInteractor()
        let presenter = LandingPresenter()
        let router = LandingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        initialSetup()
    }
    
    // MARK: - IBOutlet
    @IBOutlet weak var bottomActionView: UIView!
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet weak var skipButton: UIButton!
    
    @IBOutlet weak var bottomActionView2: UIView!
    @IBOutlet weak var loginButton2: UIButton!
    @IBOutlet weak var skipButton2: UIButton!
    
    @IBOutlet weak var pageControl: UIPageControl!
    
    // MARK: - IBActions
    
    @IBAction func signupButtonTapped(_ sender: UIButton) {
        doSignUp()
    }
    
    @IBAction func signinButtonTapped(_ sender: UIButton) {
        doSignIn()
    }
    
    @IBAction func browseButtonTapped(_ sender: UIButton) {
        doBrowse()
    }
    
    // MARK: fetch token
    
    func fetchToken()
    {
        let request = Landing.JWTToken.Request()
        interactor?.fetchToken(request: request)
    }
    
    // MARK: - Private Methods
    
    func doSignUp() {
        fetchToken()
        
    }
    
    func doSignIn() {
        fetchToken()
        
    }
    
    func doBrowse() {
        fetchToken()
        
    }
    
    func initialSetup() {
        setupPageVC()
        loginButton.appBoldFont()
        skipButton.appBoldFont()
    }
    
    func displayError(response: Landing.JWTToken.Response)
    {
        print("Error occured: \(response)")
    }
    
    func displayNextScreen()
    {
        print("Show Next Screen!!!")
    }
    
    // MARK: Page controller methods
    
    var pageControlViewController:UIPageViewController = UIPageViewController.init(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)
    var viewControllerList:[UIViewController] = []
    var selectedPageIndex:Int? = nil
    let pageCount = 5
    
    private lazy var pageControllerView: UIView = {
        for index in 0..<pageCount {
            viewControllerList.append(getViewControllerAtIndex(index: index))
        }
        
        pageControlViewController.dataSource = self
        pageControlViewController.delegate = self
        pageControlViewController.setViewControllers([viewControllerList[0]] as [UIViewController], direction: UIPageViewControllerNavigationDirection.forward, animated: false, completion: nil)
        
        self.setBottomViewsFor(index: 0)
        
        let pageControllerView = pageControlViewController.view!
        pageControllerView.backgroundColor = UIColor.clear
        
        return pageControllerView
    }()
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if isiPad {
            UIView.animate(withDuration: 0.5, animations: {
                self.setBottomViewsAlpha(to: 0.4)
            })
        }
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        if isiPad {
            UIView.animate(withDuration: 0.5, animations: {
                self.setBottomViewsAlpha(to: 1)
            })
        }
    }
    
    func setBottomViewsAlpha(to: CGFloat) {
        bottomActionView.alpha = to
        bottomActionView2.alpha = to
    }
}

extension LandingViewController: UIPageViewControllerDataSource, UIPageViewControllerDelegate{
    
    private func setupPageVC(){
        view.addSubview(pageControllerView)
        //applyPageConstraints()
        view.bringSubview(toFront: bottomActionView)
        view.bringSubview(toFront: pageControl)
        if isiPad {
            view.bringSubview(toFront: bottomActionView2)
        }
    }
    
    private func applyPageConstraints() {
        pageControllerView.translatesAutoresizingMaskIntoConstraints = false
        let guide = view.safeAreaLayoutGuide
        let leadingContraints = NSLayoutConstraint(item: pageControllerView, attribute:
            .leadingMargin, relatedBy: .equal, toItem: guide,
                            attribute: .leadingMargin, multiplier: 1.0,
                            constant: 0)
        let trailingContraints = NSLayoutConstraint(item: pageControllerView, attribute:
            .trailingMargin, relatedBy: .equal, toItem: guide,
                             attribute: .trailingMargin, multiplier: 1.0, constant: 0)
        let topConstraints = NSLayoutConstraint(item: pageControllerView, attribute: .top, relatedBy: .equal,
                                                toItem: guide, attribute: .top, multiplier: 1.0, constant: 0)
        let bottomConstraints = NSLayoutConstraint(item: pageControllerView, attribute: .bottom, relatedBy: .equal,
                                                   toItem: guide, attribute: .bottom, multiplier: 1.0, constant: 0)
        
        NSLayoutConstraint.activate([leadingContraints, trailingContraints,topConstraints, bottomConstraints])
    }
    
    private func getViewControllerAtIndex(index: NSInteger) -> LandingContentViewController{
        // Create a new view controller and pass suitable data.
        let pageContentViewController:LandingContentViewController = self.storyboard?.instantiateViewController(withIdentifier: "LandingContentViewController") as! LandingContentViewController
        pageContentViewController.pageIndex = index
        return pageContentViewController
    }
    
    func setBottomViewsFor(index: Int) {
        if !isiPad {
            return
        }
        var showBottomView1 = true
        if index != 0 && index != 4 {
            showBottomView1 = false
        }
        
        skipButton.layer.borderColor = UIColor.white.cgColor
        loginButton.layer.borderColor = UIColor.white.cgColor
        loginButton2.layer.borderColor = UIColor.white.cgColor
        skipButton.layer.borderWidth = 1
        loginButton.layer.borderWidth = 1
        loginButton2.layer.borderWidth = 1
        
        UIView.animate(withDuration: 0.5) {
            self.bottomActionView.alpha = showBottomView1 ? 1 : 0
            self.bottomActionView2.alpha = !showBottomView1 ? 1 : 0
        }
    }
    
    // MARK: - UIPageVieControllerDelegate Methods
    func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) {
        if (completed && finished) {
            if let currentVC:LandingContentViewController = pageViewController.viewControllers?.last as? LandingContentViewController {
                if(selectedPageIndex != currentVC.pageIndex){
                    selectedPageIndex = currentVC.pageIndex
                    pageControl.currentPage = selectedPageIndex ?? 0
                    
                    setBottomViewsFor(index: selectedPageIndex!)
                }
            }
        }
    }
    
    // MARK: - UIPageVieControllerDataSource Methods
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {
        let pageContent: LandingContentViewController = viewController as! LandingContentViewController
        var index = pageContent.pageIndex
        if ((index == 0) || (index == NSNotFound))
        {
            return nil
        }
        index -= 1
        return viewControllerList[index]
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {
        let pageContent: LandingContentViewController = viewController as! LandingContentViewController
        var index = pageContent.pageIndex
        if (index == NSNotFound)
        {
            return nil;
        }
        index += 1
        if (index >= pageCount)
        {
            return nil;
        }
        return viewControllerList[index]
    }
}
