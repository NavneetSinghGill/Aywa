//
//  BrowseViewController.swift
//  aywa
//
//  Created by Bestpeers on 02/01/18.
//  Copyright (c) 2018 Alpha Solutions. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BrowseDisplayLogic: class
{
    func displaySomething(viewModel: Browse.Something.ViewModel)
}

class BrowseViewController: UIViewController, BrowseDisplayLogic
{
    var interactor: BrowseBusinessLogic?
    var router: (NSObjectProtocol & BrowseRoutingLogic & BrowseDataPassing)?
    let cellHeight: CGFloat = 70
    let browseArray = ["Movies", "TV Shows", "Networks", "Kids", "Classics", "More"]
    private let browseReuseIdentifier = "BrowseTableViewCell"
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = BrowseInteractor()
        let presenter = BrowsePresenter()
        let router = BrowseRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    //MARK: Initial Setup
    private func initialiseView() {
        navigationBarWithLeftSideTitle(isTitle: true, titleName: " Browse")
        let browseNIB = UINib(nibName: Identifiers.browseTableViewCell, bundle: nil)
        tableView.register(browseNIB, forCellReuseIdentifier: Identifiers.browseTableViewCell)
        self.tableView.separatorStyle = .none
        self.tableView.delegate = self
        self.tableView.dataSource = self
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        //doSomething()
        initialiseView()
    }
    
    // MARK: Do Browse
    
    @IBOutlet weak var tableView: UITableView!
    
    func doSomething()
    {
        let request = Browse.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Browse.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension BrowseViewController: UITableViewDataSource, UITableViewDelegate {
    
    //MARK: Table View Data Source and Delegate Methods
    // Data Source
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int{
        return self.browseArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: BrowseTableViewCell = tableView.dequeueReusableCell(withIdentifier: Identifiers.browseTableViewCell, for: indexPath) as! BrowseTableViewCell
        cell.setUIForBrowse(indexPathValueIs: indexPath.row, arrayOfValue: self.browseArray)
        return cell
    }
    //    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    //        return cellHeight
    //    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selected Browse is: \(self.browseArray[indexPath.row])")
    }
}


