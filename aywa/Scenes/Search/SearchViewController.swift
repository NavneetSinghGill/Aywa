//
//  SearchViewController.swift
//  aywa
//
//  Created by Zoeb on 22/12/17.
//  Copyright (c) 2017 Alpha Solutions. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class
{
    func displaySomething(viewModel: Search.Something.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic, UISearchBarDelegate
{
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    let verticalCellHeight: CGFloat = 235 * (isiPad ? 1.3 : 1) + 40 //40 is the hieght of tableview cell heading
    let horizontalCellHeight: CGFloat = 175 * (isiPad ? 1.3 : 1) + 40
    
    var arrayOfSearch = [Home.Section.Response]()
    var mArrryFilteredSearchList = [Home.Section.Response]()
    
    var searchBar: UISearchBar!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    //MARK:- Private Methods
    func configureSearchController(){
        searchBar = UISearchBar.init(frame: CGRect.init(origin: .zero, size: CGSize.init(width: UIScreen.main.bounds.width, height: (navigationController?.navigationBar.frame.height)!)))
        
        navigationItem.titleView = searchBar
        
        searchBar.delegate = self
        
        searchBar.placeholder = LocaleKeys.kSearch
        searchBar.showsCancelButton = true
        
        searchBar.tintColor = UIColor.white
        searchBar.customizeSearchBar(imageName: "searchBarIcon")
        searchBar.setCancelButtonColor(color: UIColor.white)
        searchBar.setTextColor(color: .white)
        searchBar.setTextFieldColor(color: UIColor.clear)
        searchBar.setPlaceholderTextColor(color: .white)
        searchBar.setMagnifyingGlassColorTo(color: .white)
        searchBar.setTextFieldClearButtonColor(color: .white)
        
        //searchBar.hideorShowLeftSearchIcon(isShow: false)
    }
    
    func updateSearchResults(searchText : String) {
        if searchBar.text! == ""{
            self.tableView.isHidden = true
            self.defaultLabelForEmptyTableView.isHidden = false
        }
        else{
            mArrryFilteredSearchList = arrayOfSearch.filter { ($0 ).name!.lowercased().contains(searchBar.text!.lowercased()) }
        }
        if !mArrryFilteredSearchList.isEmpty{
            self.tableView.dataSource = self
            self.tableView.delegate = self
        }
        self.tableView.reloadData()
    }
    //MARK: Initial Setup
    private func initialiseView() {
        // Do any additional setup after loading the view.
        //navigationBarWithLeftSideTitle(isTitle: true, titleName: "Search")
        self.updateNavigationBarColor()
        configureSearchController()
        
        let searchNIB = UINib(nibName: Identifiers.homeTableCell, bundle: nil)
        tableView.register(searchNIB, forCellReuseIdentifier: Identifiers.homeTableCell)
        
        let navC = self.tabBarController?.viewControllers?.first as? UINavigationController
        let homeViewController  = navC?.viewControllers.first  as! HomeViewController!
        arrayOfSearch = (homeViewController?.sectionArray)!
        self.tableView.separatorStyle = .none
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        initialiseView()
        if mArrryFilteredSearchList.isEmpty || searchBar.text! == "" {
            self.tableView.isHidden = true
            self.defaultLabelForEmptyTableView.isHidden = false
        }
        else {
            self.tableView.dataSource = self
            self.tableView.delegate = self
            self.tableView.isHidden = false
            self.defaultLabelForEmptyTableView.isHidden = true
        }
        
    }
    
    // MARK: Do Search
    
    @IBOutlet weak var defaultLabelForEmptyTableView: UILabel!
    
    @IBOutlet weak var tableView: UITableView!
    
    
    func displaySomething(viewModel: Search.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        searchBar.resignFirstResponder()
    }
}
extension SearchViewController: UITableViewDataSource, UITableViewDelegate {
    
    //MARK:- TableView Delegate And Datasource Methods
    //MARK: Datasource
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if searchBar.text! == "" {
            self.tableView.isHidden = true
            self.defaultLabelForEmptyTableView.isHidden = false
            return 0
        } else {
            self.tableView.isHidden = false
            self.defaultLabelForEmptyTableView.isHidden = true
            return mArrryFilteredSearchList.count
        }
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: HomeTableViewCell = tableView.dequeueReusableCell(withIdentifier: Identifiers.homeTableCell, for: indexPath) as! HomeTableViewCell
        if searchBar.text! == "" {
        }
        else {
            if mArrryFilteredSearchList[indexPath.row].configuration == "E" {
                cell.cellAlignment = .Horizontal
            } else {
                cell.cellAlignment = .Vertical
            }
            cell.setCollectionView(forRow: indexPath.row, sectionData: mArrryFilteredSearchList[indexPath.row])
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if indexPath.row == 1 {
            return horizontalCellHeight
        }
        return verticalCellHeight
    }
    
    //MARK: - Search bar Delegate Methods
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String){
        updateSearchResults(searchText: searchText)
    }
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        //        searchBar.showsCancelButton = false
        //        searchBar.text = ""
        searchBar.resignFirstResponder()
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
    
}
