//
//  HomeViewController.swift
//  aywa
//
//  Created by Zoeb on 19/12/17.
//  Copyright (c) 2017 Alpha Solutions. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SVProgressHUD
import BPViewsSubviewsInOutAnimation

protocol HomeDisplayLogic: class
{
    func displayError(response: Home.Section.Response)
    func displayHomeScreen(response: [Home.Section.Response])
    
}

class HomeViewController: BPViewController, HomeDisplayLogic, UITableViewDelegate, UITableViewDataSource
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    let homeSliderBannerViewController  = "HomeSliderBannerViewController"
    
    var homeHeader: UIViewController!
    var catalogIdForHomeSection: Int? = nil
    var sectionString: String = ""
    
    var storedOffsets = [Int: CGFloat]()
    let verticalCellHeight: CGFloat = 235 * (isiPad ? 1.3 : 1) + 40 //40 is the hieght of tableview cell heading
    let horizontalCellHeight: CGFloat = 175 * (isiPad ? 1.3 : 1) + 40
    
    public var sectionArray = [Home.Section.Response]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    //MARK: Initial Setup
    private func initialiseView() {        
        let searchNIB = UINib(nibName: Identifiers.homeTableCell, bundle: nil)
        tableView.register(searchNIB, forCellReuseIdentifier: Identifiers.homeTableCell)
        
        self.tableView.dataSource = self
        self.tableView.delegate = self
        self.tableView.separatorStyle = .none
        
        // call router
        router?.routeToMoveHomeBannerViewController()
        
        self.navigationItem.hidesBackButton = true
        //  UIApplication.shared.statusBarStyle = .lightContent
        
        if catalogIdForHomeSection == nil {
            print("CatalogId ForHome Section Id nil")
        }
        else{
            print(catalogIdForHomeSection!)
        }
        
        // Call section API
        doSectionAPI()
    }
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        initialiseView()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        hideNavigationBar()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        showNavigationBar()
        
    }
    // MARK: Do Home View Controller
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var headerView: UIView!
    
    
    //MARK:- TableView Delegate And Datasource Methods
    //MARK: Datasource
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        //return model.count
        return self.sectionArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: HomeTableViewCell = tableView.dequeueReusableCell(withIdentifier: Identifiers.homeTableCell, for: indexPath) as! HomeTableViewCell
        
        if self.sectionArray[indexPath.row].configuration == "E" {
            cell.cellAlignment = .Horizontal
        } else {
            cell.cellAlignment = .Vertical
        }
        cell.setCollectionView(forRow: indexPath.row, sectionData: self.sectionArray[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if self.sectionArray[indexPath.row].configuration == "E" {
            return horizontalCellHeight
        }
        return verticalCellHeight
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeSelectedRowDataMoveViewController()
    }
    //MARK:- Show Response
    func displayError(response: Home.Section.Response)
    {
        SVProgressHUD.dismiss()
        print("Error occured: \(response)")
    }
    
    func displayHomeScreen(response: [Home.Section.Response]){
        SVProgressHUD.dismiss()
        print("Show Home Section Data!!!: \(response)")
        self.sectionArray = response
        
        if sectionString.isEmpty {
            print("Section String Empty")
        }
        else if sectionString.isEqual(BrowseIdentifier.newReleasesString) {
            self.sectionArray = [self.sectionArray[NumericValue.ZERO.rawValue]]
        }
        else if sectionString.isEqual(BrowseIdentifier.recently_AddedString) {
            self.sectionArray = [self.sectionArray[NumericValue.FIFTH.rawValue]]
        }
        else{
            
        }
        self.tableView.reloadData()
        print(response)
    }
    
    //MARK: For StatusBarStyle
    //    override var preferredStatusBarStyle: UIStatusBarStyle {
    //        return .lightContent
    //    }
    
    //MARK: For Call Section API
    func doSectionAPI()  {
        SVProgressHUD.show()
        
        var request = Home.Section.Request()
        if catalogIdForHomeSection == nil {
            request = Home.Section.Request(catalogID: NumericValue.ZERO.rawValue)
        }
        else{
            request = Home.Section.Request(catalogID: catalogIdForHomeSection!)
        }
        
        interactor?.doSectionAPI(request: request)
    }
}
